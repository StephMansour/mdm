{"version":3,"sources":["FindTheWord.jsx","App.js","serviceWorker.js","index.js"],"names":["getUniq","arr","Object","construct","Array","toConsumableArray","Set","FindTheWord","_useState","useState","_useState2","slicedToArray","w","setW","_useState3","_useState4","letters","setLetters","_useState5","_useState6","num","setNum","react_default","a","createElement","className","onSubmit","e","preventDefault","hasDouble","split","length","console","log","res","words","filter","word","some","letter","includes","every","l","htmlFor","type","id","onChange","target","value","map","key","App","src_FindTheWord","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAGA,SAASA,EAAQC,GAChB,OAAOC,OAAAC,EAAA,EAAAD,CAAIE,MAAXF,OAAAG,EAAA,EAAAH,CAAoB,IAAII,IAAIL,KAG7B,IA4EeM,EA5EK,WAAM,IAAAC,EACJC,mBAAS,IADLC,EAAAR,OAAAS,EAAA,EAAAT,CAAAM,EAAA,GACfI,EADeF,EAAA,GACZG,EADYH,EAAA,GAAAI,EAEQL,mBAAS,MAFjBM,EAAAb,OAAAS,EAAA,EAAAT,CAAAY,EAAA,GAEfE,EAFeD,EAAA,GAENE,EAFMF,EAAA,GAAAG,EAGAT,mBAAS,MAHTU,EAAAjB,OAAAS,EAAA,EAAAT,CAAAgB,EAAA,GAGfE,EAHeD,EAAA,GAGVE,EAHUF,EAAA,GAKtB,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,kBACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAME,SAAU,SAACC,GACjBA,EAAEC,iBACF,IAAIC,GAAY,EAE5Bb,EAAQc,MAAM,IAAIC,SAAW/B,EAAQgB,EAAQc,MAAM,KAAKC,SAC5DF,GAAY,EACZG,QAAQC,IAAIJ,IAIV,IAAMK,EAAMC,EAAMC,OAAO,SAASC,GAChC,GAAIrB,EAAQc,MAAM,IAAIQ,KAAK,SAACC,GAC1B,OAAOF,EAAKG,SAASD,KAErB,OAAOF,IAGZD,OAAO,SAAAxB,GAAC,OAAIA,EAAEmB,UAAYX,IAC1BgB,OAAO,SAAAxB,GACP,GAAGA,EAAEkB,MAAM,IAAIW,MAAM,SAAAC,GAAC,OAAI1B,EAAQwB,SAASE,KAC3C,OAAO9B,IAGPwB,OAAO,SAAAxB,GACP,OAAIiB,EAIEjB,EAHAZ,EAAQY,EAAEkB,MAAM,KAAKC,SAAWnB,EAAEkB,MAAM,IAAIC,SAMnDC,QAAQC,IAAIC,GACZrB,EAAKX,OAAAG,EAAA,EAAAH,CAAIgC,MAEOZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAOmB,QAAQ,WAAf,WAGArB,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,OAAOC,GAAG,UAAUpB,UAAU,eAAeqB,SAAU,SAACnB,GAAD,OAAOV,EAAWU,EAAEoB,OAAOC,WAElG1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,SAAOmB,QAAQ,OAAf,qBAGArB,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,SAASC,GAAG,MAAMpB,UAAU,eAAeqB,SAAU,SAACnB,GAAD,OAAON,EAAOM,EAAEoB,OAAOC,WAKxF1B,EAAAC,EAAAC,cAAA,UAAQoB,KAAK,SAASnB,UAAU,mBAAhC,UAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAEVb,EAAEqC,IAAI,SAACZ,GAAD,OACFf,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkByB,IAAKb,GAAOA,WC3DrDc,mLARX,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,cAJUC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.df59685e.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport words from \"an-array-of-french-words\"\n\nfunction getUniq(arr){\n\treturn new Array(...new Set(arr))\n}\n\nconst FindTheWord = () => {\n    const [w, setW] = useState([]);\n    const [letters, setLetters] = useState(null);\n    const [num, setNum] = useState(null);\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"offset-md-3 col-md-6\">\n                <h2 className=\"text text-center\">Trouves le mot</h2>\n                <br/>\n                <form onSubmit={(e) => {\n                e.preventDefault()\n                let hasDouble = false;\n\nif (letters.split(\"\").length !== getUniq(letters.split(\"\")).length) {\nhasDouble = true;\nconsole.log(hasDouble)\n\t\n}\n\n\t\tconst res = words.filter(function(word){\n \t\t if (letters.split(\"\").some((letter) => {\n    \t\treturn word.includes(letter)\n \t\t })) {\n    \t\treturn word\n  \t\t}\n})\n.filter(w => w.length === +num)\n.filter(w => {\n\tif(w.split(\"\").every(l => letters.includes(l))){\n\treturn w\n}\n})\n.filter(w => {\n\tif(!hasDouble) {\nreturn getUniq(w.split(\"\")).length === w.split(\"\").length\n\t\n}\nreturn w\n})\n\nconsole.log(res)\nsetW([...res])\n            }}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"lettres\">\n                    Lettres\n                    </label>\n                    <input type=\"text\" id=\"lettres\" className=\"form-control\" onChange={(e) => setLetters(e.target.value)}/>\n                </div>\n                <div className=\"form-group\">\n                <label htmlFor=\"num\">\n                Nombre de lettres\n                </label>\n                <input type=\"number\" id=\"num\" className=\"form-control\" onChange={(e) => setNum(e.target.value)}/>\n\n                </div>\n               \n               \n                <button type=\"submit\" className=\"btn btn-primary\">Search</button>\n                \n                <ul className=\"list-group\">\n                {\n                    w.map((word) => (\n                        <li className=\"list-group-item\" key={word}>{word}</li>\n                    ))\n                }\n                </ul>\n                 </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default FindTheWord","import React, { Component } from 'react';\nimport FindTheWord from './FindTheWord';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <FindTheWord />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}